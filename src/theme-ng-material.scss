@use '@angular/material' as mat;

@use 'sass:map';

// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

@import 'theme-ng-material-palette.scss'; // palette

// moved to fonts and here matIcons
// @use '~@angular/material' as mat;
@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,600,1,0');

@font-face {
  font-family: 'Material Icons';
  font-style: normal;
  font-weight: 400;
  src: url('./assets/fonts/maticon.fallback.woff2') format('woff2');
}

.material-symbols-outlined,
.material-icons {
  font-family: 'Material Symbols Outlined', 'Material Icons';
  font-weight: normal;
  font-style: normal;
  font-size: 24px;
  line-height: 1;
  letter-spacing: normal;
  text-transform: none;
  display: inline-block;
  white-space: nowrap;
  word-wrap: normal;
  direction: ltr;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
}

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap');

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$primary: mat.define-palette($md-rblue);
// $accent: mat.define-palette($md-ryellow, A200, A100, A400);
$accent: mat.define-palette($md-ryellow, 500, A700, 400);
// The warn palette is optional (defaults to red).
$warn: mat.define-palette($md-rred, 500);

// typography
$typography: mat.define-typography-config(
  $font-family: 'Poppins',
);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$theme: mat.define-light-theme(
  (
    color: (
      primary: $primary,
      accent: $accent,
      warn: $warn,
    ),
    typography: $typography,
    density: 0,
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($theme);

:root {
  $colorConfig: map-get($theme, color);
  $backgroundConfig: map-get($colorConfig, background);
  $foregroundConfig: map-get($colorConfig, foreground);
  --mat-body: #{map-get($backgroundConfig, background)};
  --mat-background: #{map-get($backgroundConfig, card)};
  --mat-text: #{map-get($foregroundConfig, text)};
  --mat-primary: #{mat.get-color-from-palette($primary)};
  --mat-accent: #{mat.get-color-from-palette($accent)};
  --mat-warn: #{mat.get-color-from-palette($warn)};
}

// Our dark theme
.dark-theme {
  color: white;
  $dark-primary: mat.define-palette($md-rblue);
  $dark-accent: mat.define-palette($md-ryellow, 500, A700, 400);
  $dark-warn: mat.define-palette($md-rred, 500);
  $dark-theme: mat.define-dark-theme(
    (
      color: (
        primary: $dark-primary,
        accent: $dark-accent,
        warn: $dark-warn,
      ),
      typography: $typography,
      density: 0,
    )
  );

  @include mat.all-component-colors($dark-theme);

  $colorConfig: map-get($dark-theme, color);
  $backgroundConfig: map-get($colorConfig, background);
  $foregroundConfig: map-get($colorConfig, foreground);
  --mat-body: #{map-get($backgroundConfig, background)};
  --mat-background: #{map-get($backgroundConfig, card)};
  --mat-text: #{map-get($foregroundConfig, text)};
  --mat-primary: #{mat.get-color-from-palette($dark-primary)};
  --mat-accent: #{mat.get-color-from-palette($dark-accent)};
  --mat-warn: #{mat.get-color-from-palette($dark-warn)};
}

// material overrides
.mat-tooltip {
  white-space: pre-line;
}

.mat-dialog-override {
  mat-dialog-container {
    > :first-child {
      display: flex;
      flex-direction: column;
      height: 100%;
    }

    mat-dialog-content,
    div[mat-dialog-content] {
      flex-grow: 1;
    }
  }
}

/*
 * Dialogs that need corner close icons
 * need to specifically define panel class and position relative thereafter
 */
.corner-close-mat-dialog {
  position: absolute !important;
  top: 5px;
  right: 5px;
  transform: translate(50%, -50%);
  z-index: 1;
}

.cdk-overlay-pane.corner-close-dialog {
  position: relative !important;
}

.mat-menu-content:not(:empty) {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

.mat-option.mat-option-nowrap {
  white-space: normal;
  height: 100% !important;
  line-height: 1.5em !important;
  min-height: 3em;
  padding-top: 0.75em;
  padding-bottom: 0.75em;
}

.jtw-p-0-d-container mat-dialog-container {
  padding: 0 !important;
  .mdc-dialog__container,
  .mat-mdc-dialog-surface {
    position: static;
  }
}

.menu-wide {
  min-width: 30vw !important;
  max-width: 80vw !important;
}

mat-form-field {
  .mdc-text-field,
  .mat-mdc-form-field-focus-overlay {
    background: transparent !important;
  }
}

mat-hint mat-icon {
  width: 1em !important;
  height: 1.75em !important;
}

.mdc-menu-surface.mat-mdc-autocomplete-panel,
.mdc-menu-surface.mat-mdc-select-panel {
  padding: 2px 0 !important;
}
